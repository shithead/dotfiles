-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
awful.rules = require("awful.rules")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
local widget = require("wibox.widget")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
local vicious = require("vicious")
local uzful = require("uzful")
-- require("uzful.restore")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

function run_once( cmd )
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
    findme = cmd:sub(0, firstspace-1)
  end
  awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
end

run_once("redshift -l 51.0803:13.6879 -t 6500:5500 -g0.8:0.7:0.8")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init(awful.util.getdir("config") .. "/themes/theme.lua")
uzful.util.patch.vicious()

-- This is used later as the default terminal and editor to run.
terminal = "urxvt"
dashboard_terminal = terminal
dashboard_cmd = "/usr/home/PwnyTail/.zsh/dashboard_cmd.sh"
-- editor = os.getenv("EDITOR") or "vim"
editor = "vim"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
local layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.centered(beautiful.wallpaper, s, theme.bg_normal)
    end
end
-- }}}

-- {{{ uzful window state restore

-- myrestorelist = uzful.restore(layouts)

-- }}}

-- {{{ uzful layouts infobox/menue

-- mylayoutmenu = uzful.menu.layouts(layouts, { align = "right", width = 80 })

-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, s, layouts[2])

-- {{{ Restore from uzful
--    if myrestorelist[s].length > 0 then
--        myrestorelist[s].widget = uzful.widget.infobox({ screen = s,
--        size = myrestorelist[s].fit,
--        position = "top", align = "left",
--        visible = true, ontop = false,
--        widget = myrestorelist[s].layout })
--        myrestorelist[s].layout:connect_signal("widget::updated", function ()
--            if myrestorelist[s].length == 0 then
--                myrestorelist[s].widget:hide()
--                myrestorelist[s].widget.screen = nil
--            else
--                myrestorelist[s].widget:update()
--            end
--        end)
--    end
-- }}} Restore from uzful

end
-- }}}

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}
myconkymenu = {
       { "conky1", "conky -c /usr/home/PwnyTail/.config/conky.conf" },
       { "kconky", "killall conky"},
}

development = {
    { "gitg", "gitg" },
    { "gvim", "gvim"},
}

internet = {
    { "filezilla", "filezilla" },
    { "firefox", "firefox" },
    { "thunderbird", "thunderbird" },
    { "transmission", "transmission-gtk" },
    { "wireshark", terminal .. " -e sudo wireshark" },
    { "xombrero", "xombrero" },
}

inet_proxy = {
    { "chrome", "chrome --incognito --proxy-server=\"socks://localhost:8081\"" },
    { "filezilla", "proxychains filezilla" },
    { "firefox", "proxychains firefox" },
    { "pidgin", "proxychains pidgin" },
    { "tor", "tor" },
    { "thunderbird", "proxychains thunderbird" },
    { "xombrero", "proxychains xombrero" },
}

multimedia = {}

office = {
    { "lyx", "lyx" },
    { "zathura", "zathura" },
}

sonstiges = {
    { "nautilus", "nautilus" },
    { "screenlock", "xscreensaver-command -lock" },
}

terminals = {
    { "open terminal", terminal },
    { "calcurse", terminal .. " -e calcurse" },
    { "mcabber", terminal .. " -e mcabber" },
    { "ncmpcpp", terminal .. " -e ncmpcpp" },
    { "ranger", terminal .. " -e ranger" },
    { "vim", terminal .. " -e vim" },
}

mymenue = {
    { "conky_ctl", myconkymenu },
    { "development", development },
    { "internet", internet },
    { "inet-proxy", inet_proxy },
--    { "multimedia", multimedia },
    { "office", office },
    { "sonstiges", sonstiges },
}

mymainmenu = awful.menu({
    items = {
        { "awesome", myawesomemenu, beautiful.awesome_icon },
        { "program", mymenue },
        { "wallpapers", uzful.menu.wallpaper.menu(theme.wallpapers) },
        { "terminals", terminals },
    }
} )

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}
-- {{{ Mcabber notify textbox
mcabber_notify = wibox.widget.textbox()
-- }}}
-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock()

-- Separator/Spacer icons
separator = wibox.widget.textbox()
separator:set_text( '<span color="#A9D7F2"> || </span>' )
space = widget.textbox()
space:set_text("  ")
-- Readout
	-- Icon
	-- cpuicon = widget.imagebox()
	-- cpuicon.set_image(beautiful.widget_cpu)
	-- Percentage
--	cpu1 = widget.textbox()
--	vicious.register(cpu1, vicious.widgets.cpu, "(1): $1%")
--	cpu2 = widget.textbox()
--	vicious.register(cpu2, vicious.widgets.cpu, "(2): $2%")
--	-- Meter
--	cpubar = awful.widget.progressbar()
--	cpubar:set_width(50)
--	cpubar:set_height(8)
--	cpubar:set_vertical(false)
--	cpubar:set_background_color("#3F3F3F")
--	cpubar:set_color(beautiful.bg_urgent )
--	vicious.register(cpubar, vicious.widgets.cpu, "$1", 7)
--
--	cpubar2 = awful.widget.progressbar()
--	cpubar2:set_width(50)
--	cpubar2:set_height(8)
--	cpubar2:set_vertical(false)
--	cpubar2:set_background_color("#3F3F3F")
--	cpubar2:set_color(beautiful.bg_urgent )
--	vicious.register(cpubar2, vicious.widgets.cpu, "$2", 7)
--	-- Align progressbars
--	awful.widget.layout.margins[cpubar.widget] = { top = 2 }
--	awful.widget.layout.margins[cpubar2.widget] = { top = 2 }
--	-- Frequency
--	freq1 = widget.textbox()
--	vicious.register(freq1, vicious.widgets.cpufreq, "$2 Ghz", 9, "cpu0")
--	freq2 = widget.textbox()
--	vicious.register(freq2, vicious.widgets.cpufreq, "$2 Ghz", 9, "cpu1")
--	-- Cache that shit
--	vicious.cache(vicious.widgets.cpu)

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
        awful.button({ }, 1, function (c)
            if c == client.focus then
                c.minimized = true
            else
                -- Without this, the following
                -- :isvisible() makes no sense
                c.minimized = false
                if not c:isvisible() then
                    awful.tag.viewonly(c:tags()[1])
                end
                -- This will also un-minimize
                -- the client, if needed
                client.focus = c
                c:raise()
            end
        end),
        awful.button({ }, 3, function ()
            if instance then
                instance:hide()
                instance = nil
            else
                instance = awful.menu.clients({ width=250 })
            end
        end),
        awful.button({ }, 4, function ()
            awful.client.focus.byidx(1)
            if client.focus then client.focus:raise() end
        end),
        awful.button({ }, 5, function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end))

-- {{{ dashboard_placeholder into background
dashboard_placeholder = wibox.widget.background()
dashboard_placeholder.fit = function()
	if dashboard and not dashboard.minimized then
		local g = dashboard:geometry()
		return g.width, g.height
	end
	return 0,0
end
-- }}}

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
--    awful.button({ }, 2, function () mylayoutmenu:toggle() end),
    awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
    awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
    awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })

    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mylauncher)
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])

    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    right_layout:add(mcabber_notify)
    right_layout:add(mytextclock)
    right_layout:add(mylayoutbox[s])

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

    -- A Own layout for a glory Dashboard
	layout = uzful.layout.build({
		layout = wibox.layout.fixed.vertical,
		dashboard_placeholder,
		layout})

    mywibox[s]:set_widget(layout)

    -- Create the bottom wibox
    -- mywibox[s] = awful.wibox({ position = "bottom", screen = s, height=14 })

end
-- }}}

-- {{{ Mcabber hook
naughty.config.presets.online = {
    bg = "#1f880e80",
    fg = "#ffffff",
}
naughty.config.presets.chat = naughty.config.presets.online
naughty.config.presets.away = {
    bg = "#ffff0080",
    fg = "#ffffff",
}
naughty.config.presets.xa = {
    bg = "#64636380",
    fg = "#ffffff",
}
naughty.config.presets.dnd = {
    bg = "#65340080",
    fg = "#ffffff",
}
naughty.config.presets.invisible = {
    bg = "#ffffff80",
    fg = "#000000",
}
naughty.config.presets.offline = {
    bg = "#88000080",
    fg = "#ffffff",
}
naughty.config.presets.requested = naughty.config.presets.offline
naughty.config.presets.error = {
    bg = "#ff000080",
    fg = "#ffffff",
}

local muc_nick = "PwnyTail"

function mcabber_event_hook(kind, direction, jid, msg)
    if kind == "MSG" then
        if direction == "IN" or direction == "MUC" then
            local filehandle = io.open(msg)
            if filehandle == nil then
                return
            end
            local txt = filehandle:read("*all")
            filehandle:close()
            awful.util.spawn("rm "..msg)
            if direction == "MUC" and jid:match("c3d2@chat.c3d2.de") then
                return
            end
            if direction == "MUC" and txt:match("^<" .. muc_nick .. ">") then
                return
            end

            naughty.notify{
                icon = "chat_msg_recv",
                text = awful.util.escape(txt),
                title = jid
            }
        end
    elseif kind == "STATUS" then
        local mapping = {
            [ "O" ] = "online",
            [ "F" ] = "chat",
            [ "A" ] = "away",
            [ "N" ] = "xa",
            [ "D" ] = "dnd",
            [ "I" ] = "invisible",
            [ "_" ] = "offline",
            [ "?" ] = "error",
            [ "X" ] = "requested"
        }
        local status = mapping[direction]
        local iconstatus = status
        if not status then
            status = "error"
        end
        if jid:match("icq") then
            iconstatus = "icq/" .. status
        end
        naughty.notify{
            preset = naughty.config.presets[status],
            text = jid,
            icon = iconstatus
        }
    elseif kind == "UNREAD" then
        local array = {}
        for word in direction:gmatch("%d+") do
            table.insert(array, tonumber(word))
        end
        --print(unpack(array))
        -- FIXME Es werden auch MUC Nachrichten angezeigt. DOOFFFFF
        if array[1] > 0 then
            local text = array[1] .. " U"

            if array[2] > 0  then
                text = text .. "D"
            end
            if array[3] > 0  then
                text = text .. "M"
            end
            mcabber_notify:set_text(text)
        else
            mcabber_notify:set_text("")
        end
    end
end
-- }}}

-- {{{ Hook for FreeBSD notification new port_version
pkg_notify_timeout = 3600
-- setup the timer
pkg_notify_timer = timer { timeout = pkg_notify_timeout }
function pkg_notify( kind )
    -- stop the timer (we don't need multiple instances running at the same time)
    pkg_notify_timer:stop()

    if kind == "version" then
        info = awful.util.pread("pkg version -vIL=")
    end
    naughty.notify{
        preset = { fg = '#ffffff', bg ='#303030' },
        text = info
    }
    --restart the timer
    pkg_notify_timer.timeout = pkg_notify_timeout
    pkg_notify_timer:start()
end
pkg_notify_timer:connect_signal("timeout", function () pkg_notify("version") end )
-- initial start when rc.lua is first run
pkg_notify_timer:start()
-- }}}

-- {{{ Conky

function get_conky()
    local clients = client.get()
    local conky = nil
    local i = 1
    while clients[i]
    do
        if clients[i].class == "Conky"
        then
            conky = clients[i]
        end
        i = i + 1
    end
    return conky
end
function raise_conky()
    local conky = get_conky()
    if conky
    then
        conky.ontop = true
    end
end
function lower_conky()
    local conky = get_conky()
    if conky
    then
        conky.ontop = false
    end
end
function toggle_conky()
    local conky = get_conky()
    if conky
    then
        if conky.ontop
        then
            conky.ontop = false
        else
            conky.ontop = true
        end
    end
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),
    awful.key({ modkey, "Mod1"   }, "p",     function () awful.util.spawn("i3lock -i /usr/home/PwnyTail/.config/awesome/themes/i3lock-dark-tamar20_1440-900.png -c 000000") end),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end),

    -- Layout manipulation
    awful.key({ modkey, "Mod1"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Mod1"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({                   }, "F10", raise_conky, lower_conky),
    awful.key({                   }, "Pause", toggle_conky),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)
--
-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber))
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

-- {{{ Dashboard Togglebar
globalkeys = awful.util.table.join(
    globalkeys, awful.key({ modkey,      }, "d", function ()

    if dashboard then
        local s, olds = mouse.screen, dashboard.screen
        if s == olds then
            dashboard.minimized = not dashboard.minimized
        else
            mywibox[olds].height = theme.menu_height
        end
        if not dashboard.minimized then
            client.focus = dashboard
        end
        dashboard.screen = s
        mywibox[s].height = theme.menu_height +
        (dashboard.minimized and 0 or dashboard:geometry().height)
        mywibox[s].draw()
    else
        awful.util.spawn_with_shell( dashboard_cmd )
    end
end) )
-- }}}

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- {{{{ Set keys
root.keys(globalkeys)
-- }}}


-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    { rule = { class = "Thunderbird" },
            properties = { tag = tags[1][2] } },
    { rule = { class = "Firefox" },
            properties = { tag = tags[1][3] } },
    { rule = { class = "chrome" },
            properties = { tag = tags[1][3] } },
    { rule = { class = "soffice" },
            properties = { tag = tags[1][5] } },
    { rule = { class = "Lyx" },
            properties = { tag = tags[1][5] } },
    { rule = { class = "Wireshark" },
            properties = { tag = tags[1][6] } },
    { rule = { class = "transmission-gtk" },
            properties = { tag = tags[1][7] } },
    { rule = { class = "Conky" },
      properties = {
          floating = true,
          sticky = true,
          ontop = false,
          focusable = false,
          size_hints = {"program_position", "program_size"}
      } }
}
-- }}}

-- dashboard disabeled by default
dashboard = nil

-- {{{ Signals
client.connect_signal("unmanage", function (c)
	if c == dashboard then
		local s = dashboard.screen
		mywibox[s].height = theme.menu_height
		mywibox[s].draw()
		dashboard = nil
	end
end)

-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    c:connect_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

	if not dashboard and c.instance == dashboard_terminal then
		dashboard = c
		c.minimized = true
		c.border_width = 0
		c.focusable = true
		c.sticky = true
		c.maximized_horizontal = true
		c.skip_taskbar = true
		c.floating = true
		c:geometry({y = c:geometry().y - theme.menu_height, height = 256 })
	end

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end

    local titlebars_enabled = false
    if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- Widgets that are aligned to the left
        local left_layout = wibox.layout.fixed.horizontal()
        left_layout:add(awful.titlebar.widget.iconwidget(c))

        -- Widgets that are aligned to the right
        local right_layout = wibox.layout.fixed.horizontal()
        right_layout:add(awful.titlebar.widget.floatingbutton(c))
        right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        right_layout:add(awful.titlebar.widget.stickybutton(c))
        right_layout:add(awful.titlebar.widget.ontopbutton(c))
        right_layout:add(awful.titlebar.widget.closebutton(c))

        -- The title goes in the middle
        local title = awful.titlebar.widget.titlewidget(c)
        title:buttons(awful.util.table.join(
                awful.button({ }, 1, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.move(c)
                end),
                awful.button({ }, 3, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.resize(c)
                end)
                ))

        -- Now bring it all together
        local layout = wibox.layout.align.horizontal()
        layout:set_left(left_layout)
        layout:set_right(right_layout)
        layout:set_middle(title)

        awful.titlebar(c):set_widget(layout)
    end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
--
